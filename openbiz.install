<?php

/**
 * @file
 * Install, update and uninstall functions for the OpenBiz installation profile.
 *
 * @copyright Copyright(c) 2015
 * @license GPL v2 http://www.fsf.org/licensing/licenses/gpl.html
 * @author XiNG Digital
 */

define('OPENBIZ_INSTALL_DEFAULT_THEME', 'openbiz_base');
define('OPENBIZ_DEFAULT_FRONT_THEME', 'openbiz_base');
define('OPENBIZ_DEFAULT_ADMIN_THEME', 'adminimal');

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function openbiz_install() {
  // set the time limit to unlimited for install
  drupal_set_time_limit(0);
  // Only administrators can create user accounts.
  variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);
  // Upping the image jpeg quality.
  variable_set('image_jpeg_quality', 95);
  // Set up text formats.
  _openbiz_install_text_formats();
  // Configure basic roles.
  _openbiz_install_basic_roles_perms();
  // Set up theme.
  _openbiz_install_default_themes();
  // Install default blocks.
  _openbiz_install_default_blocks();
  // Set default variable values.
  _openbiz_install_default_variables();
  // Install default menus.
  _openbiz_install_menus();
  // Clean up.
  _openbiz_install_cleanup();
}

/**
 * Set text formats.
 */
function _openbiz_install_text_formats() {
  // Plain text.
  $plain_text_format = array(
    'format' => 'plain_text',
    'name' => 'Plain text',
    'weight' => 10,
    'filters' => array(
      // Display any HTML as plain text.
      'filter_html_escape' => array(
        'weight' => 0,
        'status' => 1,
        'settings' => array(),
      ),
      // Convert URLs into links.
      'filter_url' => array(
        'weight' => 1,
        'status' => 1,
        'settings' => array(
          'filter_url_length' => 72,
        ),
      ),
      // Convert line breaks into HTML.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
        'settings' => array(),
      ),
    ),
  );
  $plain_text_format = (object) $plain_text_format;
  filter_format_save($plain_text_format);

  // Filtered HTML.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  // Full HTML.
  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Enable default permissions for system roles.
  $rich_text_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(
    DRUPAL_ANONYMOUS_RID,
    array(
      'access content',
    )
  );
  user_role_grant_permissions(
    DRUPAL_AUTHENTICATED_RID,
    array(
      'access content',
      $rich_text_permission,
    )
  );
}

/**
 * Configure basic roles.
 */
function _openbiz_install_basic_roles_perms() {
  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Set base weight
  $weight = 1;
  // Set base perms.
  $base_permissions = array('access content');
  // Set advanced perms.
  $extra_perms = array(
    'access environment indicator',
    'administer google analytics',
  );
  $extended_permissions = $base_permissions + $extra_perms;

  // Create default roles.
  $roles = array();

  // Site manager.
  $roles['Site manager'] = array(
    'name' => 'Site manager',
    'weight' => $weight++,
    'permissions' => $extended_permissions,
  );

  // Site builder.
  $roles['Site builder'] = array(
    'name' => 'Site builder',
    'weight' => $weight++,
    'permissions' => $extended_permissions,
  );

  // Create the roles.
  foreach ($roles as $role) {
    $role_object = new stdClass();
    $role_object->name = $role['name'];
    $role_object->weight = $role['weight'];

    // Save the role.
    user_role_save($role_object);

    // Grant permissions.
    if (!empty($role['permissions'])) {
      user_role_grant_permissions($role_object->rid, $role['permissions']);
    }
  }

  // Update the weight of the administrator role so its last.
  $admin_role = user_role_load($admin_role->rid);
  $admin_role->weight = $weight++;
  user_role_save($admin_role);
}

/**
 * Set Adminimal as the Admin Theme.
 *
 * @TODO prepare openbiz theme
 */
function _openbiz_install_default_themes() {
  $enable = array(
    'theme_default' => OPENBIZ_DEFAULT_FRONT_THEME,
    'admin_theme' => OPENBIZ_DEFAULT_ADMIN_THEME,
    'install_profile' => 'openbiz',
  );
  theme_enable($enable);
  // Set variables.
  variable_set('admin_theme', OPENBIZ_DEFAULT_ADMIN_THEME);
  variable_set('node_admin_theme', '1');
  variable_set("theme_default", OPENBIZ_DEFAULT_FRONT_THEME);
  variable_set("install_profile", 'openbiz');
  // Disable the default Bartik.
  theme_disable(array('bartik'));
}

/**
 * Default blocks.
 */
function _openbiz_install_default_blocks() {
  // Enable some standard blocks.
  $default_theme = variable_get('theme_default', 'openbiz_base');
  $admin_theme = variable_get('admin_theme', 'adminimal');
  $values = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array(
    'module',
    'delta',
    'theme',
    'status',
    'weight',
    'region',
    'pages',
    'cache',
  ));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();
}

/**
 * Set default variables.
 */
function _openbiz_install_default_variables() {
  $variables = array(
    // Pathauto default.
    'pathauto_node_pattern' => '[node:title]',
    'pathauto_punctuation_hyphen' => 1,
    'pathauto_taxonomy_term_pattern' => '[term:vocabulary]/[term:name]',
    'pathauto_user_pattern' => 'users/[user:name]',
    'path_alias_whitelist' => array(
      'node' => TRUE,
      'taxonomy' => TRUE,
      'user' => TRUE,
    ),
    // User registration.
    'user_register' => USER_REGISTER_ADMINISTRATORS_ONLY,
    // Session lifetime 0.
    'session_cookie_lifetime_type' => 'browser_session',
    // Soft block users after 5 failed login attempts in 24 hours.
    'login_security_user_wrong_count' => '5',
    'login_security_track_time' => '24',
    // Display last login time.
    'login_security_last_access_timestamp' => 1,
    'login_security_last_login_timestamp' => 1,
    // Shield settings.
    'shield_enabled' => 0,
    // Maintenance Message.
    'maintenance_mode_message' => '<p>This web site is currently undergoing some maintenance and is unavailable.</p><p>Thank you for your patience.</p>',
  );
  // Set variables.
  foreach ($variables as $key => $value) {
    variable_set($key, $value);
  }

  // Set Crumbs weights.
  $crumbs_weights = array(
    'crumbs.home_title' => 1,
    'path' => 2,
    '*' => 3,
  );
  variable_set('crumbs_weights', $crumbs_weights);
  variable_set('crumbs_show_current_page', 0);
}

/**
 * Set default menu items.
 */
function _openbiz_install_menus() {
  // Create a Home link in the main menu.
  $item = array(
    'link_title' => st('Home'),
    'link_path' => '<front>',
    'menu_name' => 'main-menu',
    'weight' => -50,
  );
  menu_link_save($item);
  menu_rebuild();
}

/**
 * Clean up after install.
 */
function _openbiz_install_cleanup() {
  // Rebuild sitemap.
  _openbiz_rebuild_sitemap();
  // Required by view_unpublished module.
  node_access_rebuild();
  // Clear cache.
  cache_clear_all();
  // Revert features.
  features_revert(array('openbiz_product' => array('commerce_autosku_patterns')));
}

/**
 * Rebuilds the sitemap.xml.
 */
function _openbiz_rebuild_sitemap() {
  if (module_exists('xmlsitemap')) {
    module_load_include('generate.inc', 'xmlsitemap');
    // Build a list of rebuildable link types.
    $rebuild_types = xmlsitemap_get_rebuildable_link_types();
    // Run the batch process.
    xmlsitemap_run_unprogressive_batch('xmlsitemap_rebuild_batch', $rebuild_types, TRUE);
  }
}

/**
 * Force-set a theme at any point during the execution of the request.
 *
 * Drupal doesn't give us the option to set the theme during the installation
 * process and forces enable the maintenance theme too early in the request
 * for us to modify it in a clean way.
 *
 * This function was helpfully taken from Commerce Kickstart.
 */
function _openbiz_set_theme($target_theme) {
  if ($GLOBALS['theme'] != $target_theme) {
    unset($GLOBALS['theme']);

    drupal_static_reset();
    $GLOBALS['conf']['maintenance_theme'] = $target_theme;
    _drupal_maintenance_theme();
  }
}

/**
 * Implements hook_install_tasks().
 */
function openbiz_install_tasks($install_state) {
  $task = array();

  $openbiz_example_content_batch = variable_get('openbiz_example_content_batch', FALSE);

  $task['openbiz_install_additional_options'] = array(
    'display_name' => st('OpenBiz Example'),
    'display' => TRUE,
    'type' => 'form',
    'run' => INSTALL_TASK_RUN_IF_NOT_COMPLETED,
  );
  $task['openbiz_example_content_install'] = array(
    'display_name' => st('Example content'),
    'display' => FALSE,
    'type' => 'batch',
    'run' => $openbiz_example_content_batch ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
  );
  $task['_openbiz_install_cleanup'] = array(
    'display_name' => st('Finish'),
    'display' => FALSE,
    'type' => 'normal',
    'run' => INSTALL_TASK_RUN_IF_NOT_COMPLETED,
  );

  return $task;
}

/**
 * Form callback for additional options install task.
 */
function openbiz_install_additional_options() {
  set_time_limit(0);

  $form = array();

  drupal_set_title('Install example contents');

  $form['default_content'] = array(
    '#type' => 'fieldset',
    '#title' => st('Example content'),
  );

  $form['default_content']['install'] = array(
    '#type' => 'checkbox',
    '#title' => st('Install example content'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => st('Continue'),
  );

  return $form;
}

/**
 * Submit handler.
 *
 * @ingroup forms
 */
function openbiz_install_additional_options_submit(&$form, &$form_state) {
  // If user selects to install default content. Set var.
  if ($form_state['values']['install']) {
    variable_set('openbiz_example_content_batch', TRUE);
  }

  return FALSE;
}

/**
 * Returns modules and functions to install default/example content.
 */
function openbiz_default_content() {
  return array(
    0 => array(
      'title' => st('OpenBiz Standard Page Examples'),
      'type' => 'module',
      'key' => 'openbiz_standard_page_content',
    ),
    1 => array(
      'title' => st('OpenBiz Blog Examples'),
      'type' => 'module',
      'key' => 'openbiz_blog_content',
    ),
    2 => array(
      'title' => st('OpenBiz News Examples'),
      'type' => 'module',
      'key' => 'openbiz_news_content',
    ),
    3 => array(
      'title' => st('OpenBiz Media Release Examples'),
      'type' => 'module',
      'key' => 'openbiz_media_release_content',
    ),
  );
}

/**
 * Sets the Batch API array for batch processing.
 */
function openbiz_example_content_install() {
  $operations = array();

  $steps = openbiz_default_content();
  foreach ($steps as $content) {
    $operations[] = array(
      'openbiz_example_content_install_batch',
      array(
        $content['type'],
        $content['key'],
        $content['title'],
        isset($content['message']) ? $content['message'] : '',
      ),
    );
  }

  $batch = array(
    'operations' => $operations,
    'title' => st('Processing OpenBiz example content'),
    'init_message' => st('Initializing'),
    'error_message' => st('Error'),
    'finished' => 'openbiz_example_content_install_finished',
  );

  return $batch;
}

/**
 * Either enable module or run function for Example content batch install.
 *
 * @param string $type
 *   Type of content either 'module' or 'function'.
 * @param string $key
 *   Name of module or function to enable/run.
 * @param string $name
 *   Title/name of the module or function.
 * @param string $message
 *   Optional message to be output with function.
 * @param array $context
 *   Batch context data.
 */
function openbiz_example_content_install_batch($type, $key, $name, $message, &$context) {
  if ($type == 'module') {
    module_enable(array($key), TRUE);
    $context['results'][] = $key;
    $context['message'] = st('Enabled %module.', array('%module' => $name));
  }
  elseif ($type == 'function') {
    call_user_func($key);
    $context['results'][] = $key;
    if ($message) {
      $context['message'] = $message;
    }
  }
}

/**
 * Performs any cleanup and output on completion of example content batch.
 */
function openbiz_example_content_install_finished($context) {
  drupal_set_message('OpenBiz example content installed.');
  drupal_set_message('OpenBiz sitemap has been rebuilt.');
}

/**
 * Implements hook_install_tasks_alter().
 */
function openbiz_install_tasks_alter(&$tasks, $install_state) {
  // Set default site language to English.
  global $install_state;
  $install_state['parameters']['locale'] = 'en';
  // Hide 'Choose language' installation task.
  $tasks['install_select_locale']['display'] = FALSE;

  $tasks['_openbiz_install_finished'] = $tasks['install_finished'];
  unset($tasks['install_finished']);

  _openbiz_set_theme(OPENBIZ_INSTALL_DEFAULT_THEME);
}

/**
 * Overrides the core install_finished.
 */
function _openbiz_install_finished() {
  drupal_set_title(st('@drupal installation complete', array('@drupal' => drupal_install_profile_distribution_name())), PASS_THROUGH);
  $messages = drupal_set_message();
  $output = '<p>' . st('Congratulations, you installed @drupal!', array('@drupal' => drupal_install_profile_distribution_name())) . '</p>';
  $output .= '<p>' . (isset($messages['error']) ? st('Review the messages above before visiting <a href="@url">your new site</a>.', array('@url' => url(''))) : st('<a href="@url" class="button">Visit your new site</a>', array('@url' => url('')))) . '</p>';

  // Flush all caches to ensure that any full bootstraps during the installer
  // do not leave stale cached data, and that any content types or other items
  // registered by the installation profile are registered correctly.

  variable_set('features_rebuild_on_flush', FALSE);
  drupal_flush_all_caches();

  // Remember the profile which was used.
  variable_set('install_profile', drupal_get_profile());

  // Installation profiles are always loaded last.
  db_update('system')
    ->fields(array('weight' => 1000))
    ->condition('type', 'module')
    ->condition('name', drupal_get_profile())
    ->execute();

  // Cache a fully-built schema.
  drupal_get_schema(NULL, TRUE);

  // Run cron to populate update status tables (if available) so that users
  // will be warned if they've installed an out of date Drupal version.
  // Will also trigger indexing of profile-supplied content or feeds.
  drupal_cron_run();
  variable_set('features_rebuild_on_flush', TRUE);

  return $output;
}
